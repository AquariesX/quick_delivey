generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String    @id @default(cuid())
  uid                String    @unique
  username           String
  email              String    @unique
  phoneNumber        String
  role               UserRole  @default(CUSTOMER)
  emailVerification  Boolean   @default(false) @map("email_verification")
  type               String?
  createdAt          DateTime  @default(now()) @map("createdAt")
  updatedAt          DateTime  @updatedAt @map("updatedAt")
  password           String?
  passwordResetToken String?   @map("password_reset_token")
  verificationToken  String?   @map("verification_token")
  productsAsApprover Product[] @relation("ApproverProducts")
  productsAsCreator  Product[] @relation("CreatorProducts")
  productsAsVendor   Product[] @relation("VendorProducts")
  orders             Order[]

  @@map("users")
}

model Category {
  id            String         @id @default(cuid())
  name          String
  code          String         @unique
  description   String?
  status        CategoryStatus @default(ACTIVE)
  createdBy     String         @map("createdBy")
  createdAt     DateTime       @default(now()) @map("createdAt")
  updatedAt     DateTime       @updatedAt @map("updatedAt")
  products      Product[]
  subCategories SubCategory[]

  @@map("categories")
}

model SubCategory {
  subCatId   Int       @id @default(autoincrement()) @map("sub_cat_id")
  subCatCode String    @unique @map("sub_cat_code") @db.VarChar(50)
  subCatName String    @map("sub_cat_name") @db.VarChar(255)
  status     Boolean   @default(true)
  catId      String    @map("cat_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  products   Product[]
  category   Category  @relation(fields: [catId], references: [id], onDelete: Cascade)

  @@index([catId], map: "sub_categories_cat_id_fkey")
  @@map("sub_categories")
}

model Product {
  description       String?        @db.Text
  price             Decimal        @db.Decimal(10, 2)
  sku               String         @unique @db.VarChar(100)
  barcode           String?        @unique @db.VarChar(100)
  status            Boolean        @default(true)
  approvalStatus    ApprovalStatus @default(Pending) @map("approval_status")
  approveById       String?        @map("approve_by")
  catId             String         @map("cat_id")
  cost              Decimal        @db.Decimal(10, 2)
  createdAt         DateTime       @default(now()) @map("created_at")
  createdById       String         @map("created_by")
  discount          Decimal        @default(0.00) @db.Decimal(5, 2)
  proId             Int            @id @default(autoincrement()) @map("pro_id")
  proImages         String?        @map("pro_images") @db.LongText
  proName           String         @map("pro_name") @db.VarChar(255)
  qnty              Int            @default(0)
  stock             Int            @default(0)
  subCatId          Int            @map("sub_cat_id")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  vendorId          String         @map("vendor_id")
  brandName         String?        @map("brand_name") @db.VarChar(255)
  conditionType     String?        @map("condition_type") @db.VarChar(50)
  currency          String?        @default("USD") @db.VarChar(10)
  ingredients       String?        @db.Text
  keyFeatures       String?        @map("key_features") @db.LongText
  manufacturer      String?        @db.VarChar(255)
  modelNumber       String?        @map("model_number") @db.VarChar(100)
  packageWeight     String?        @map("package_weight") @db.VarChar(100)
  productDimensions String?        @map("product_dimensions") @db.VarChar(255)
  productType       String?        @map("product_type") @db.VarChar(100)
  reviews           String?        @db.LongText
  saleEndDate       DateTime?      @map("sale_end_date")
  salePrice         Decimal?       @map("sale_price") @db.Decimal(10, 2)
  saleStartDate     DateTime?      @map("sale_start_date")
  sizeName          String?        @map("size_name") @db.VarChar(100)
  variations        String?        @db.LongText
  warranty          String?        @db.VarChar(255)
  color             String?        @db.VarChar(100)
  size              String?        @db.VarChar(100)
  approver          Users?         @relation("ApproverProducts", fields: [approveById], references: [uid])
  category          Category       @relation(fields: [catId], references: [id], onDelete: Cascade)
  creator           Users          @relation("CreatorProducts", fields: [createdById], references: [uid], onDelete: Cascade)
  subCategory       SubCategory    @relation(fields: [subCatId], references: [subCatId], onDelete: Cascade)
  vendor            Users          @relation("VendorProducts", fields: [vendorId], references: [uid], onDelete: Cascade)
  orderItems        OrderItem[]

  @@index([approveById], map: "products_approve_by_fkey")
  @@index([catId], map: "products_cat_id_fkey")
  @@index([createdById], map: "products_created_by_fkey")
  @@index([subCatId], map: "products_sub_cat_id_fkey")
  @@index([vendorId], map: "products_vendor_id_fkey")
  @@map("products")
}

model Order {
  id               String        @id @default(cuid())
  userId           String        @map("user_id")
  status           OrderStatus   @default(PENDING)
  shippingAddress  String?       @map("shipping_address") @db.VarChar(500)
  paymentMethod    String?       @map("payment_method") @db.VarChar(50)
  totalAmount      Decimal       @default(0) @map("total_amount") @db.Decimal(10, 2)
  trackingNumber   String?       @map("tracking_number") @db.VarChar(100)
  estimatedDelivery DateTime?    @map("estimated_delivery")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  user             Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems       OrderItem[]

  @@index([userId], map: "orders_user_id_fkey")
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId    String   @map("order_id")
  productId  Int      @map("product_id")
  quantity   Int      @default(1)
  price      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [proId], onDelete: Cascade)

  @@index([orderId], map: "order_items_order_id_fkey")
  @@index([productId], map: "order_items_product_id_fkey")
  @@map("order_items")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  DRIVER
  VENDOR
  CUSTOMER
}

enum ApprovalStatus {
  Pending
  Approved
  Rejected
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
